(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{207:function(t,e,a){"use strict";a.r(e);var s=a(0),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"bem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bem"}},[t._v("#")]),t._v(" BEM")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-images.githubusercontent.com/40876048/80907277-c5950800-8d50-11ea-89a2-82be297f14b3.jpg",alt:"BEM",title:"BEM"}}),t._v("\nWSConf에서 CSS 방법론(OOCSS, BEM)에 대한 세션을 들으면서 CSS를 작성할때 어떤 방법론을 통해서 작성해 본적이 없었고 그냥 생각나는데로, 또는 다른데서 봤던 형태로 작성하고 있었습니다.\n해당 방법론을 쓰는데는 크게 4가지의 이유가 있습니다.")]),t._v(" "),a("ul",[a("li",[t._v("쉬운 유지보수")]),t._v(" "),a("li",[t._v("코드의 재사용")]),t._v(" "),a("li",[t._v("확장 가능")]),t._v(" "),a("li",[t._v("직관적인 네이밍")])]),t._v(" "),a("p",[t._v("id, class명을 작성할때, 항상 고민이였던 부분이 네이밍이였고, 그때그때 떠오르는데로 작성하는 경우가 많습니다. 그러다 보니 나중에 이게 어떤놈인지 알기 힘들었고 수정하려면 HTML과 CSS를 다 찾아보아야 했습니다.\nCSS 방법론은 쉽게 유지보수가 가능하게 하고, 재사용 할 수 있도록 구현하며, 쉽게 확장가능하게 하는 공통의 목적을 가지고 있습니다. 여러 방법론 중에서 BEM과 OOCSS에 대해서 알아보고 어떻게 적용할지 고민해보기로 했습니다.")]),t._v(" "),a("h2",{attrs:{id:"bem의-기본-구조"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bem의-기본-구조"}},[t._v("#")]),t._v(" BEM의 기본 구조")]),t._v(" "),a("p",[t._v("BEM은 Blcok, Element, Modifier를 뜻합니다. 저 세 가지로 구성된 이름을 짓는 거죠! 그리고 각각 __와 --로 구분합니다.\n이렇게 생긴 클래스네임, 어디선가 본 적 있지 않으신가요?")]),t._v(" "),a("div",{staticClass:"language-css extra-class"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".header__navigation--navi-text")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("위 코드에서 header는 Block, naviagtion은 Element, navi-text는 Modifier가 됩니다.")]),t._v(" "),a("p",[t._v("BEM은 기본적으로 ID를 사용하지 않으며, class만을 사용합니다."),a("br"),t._v("\n또, '어떻게 보이는가'가 아니라 '어떤 목적인가'에 따라 이름을 짓습니다. 예를 들어, 에러 메시지를 띄우는 P 태그에게는 .red가 아닌, .error라는 이름을 줘야합니다.\n이름을 연결할 때는 block-name과 같이 하이픈 하나만 써서 연결합니다.")]),t._v(" "),a("h2",{attrs:{id:"작명규칙-naming-convention"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#작명규칙-naming-convention"}},[t._v("#")]),t._v(" 작명규칙(Naming Convention)")]),t._v(" "),a("ul",[a("li",[t._v("개발, 디버깅, 유지보수를 위하여 CSS 선택자의 이름을 가능한 한 명확하게 만드는 것이 목표입니다.")]),t._v(" "),a("li",[t._v("소문자, 숫자 만을 이용해서 작명합니다.")]),t._v(" "),a("li",[t._v("여러단어의 조합은 하이픈(-)으로 연결하여 작명합니다.")])]),t._v(" "),a("h2",{attrs:{id:"블록-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#블록-block"}},[t._v("#")]),t._v(" 블록(Block)")]),t._v(" "),a("ul",[a("li",[t._v("재사용 할 수있는 기능적으로 독립적인 페이지 구성 요소. HTML에서 블록은 class 속성으로 표시된다.")]),t._v(" "),a("li",[t._v("형태(red, big)가 아닌 목적(menu, button)에 맞게 결정해야 한다.")]),t._v(" "),a("li",[t._v("블록은 환경에 영향을 받지 않아야 한다. 즉, 여백이나 위치를 설정하면 안된다.")]),t._v(" "),a("li",[t._v("태그, id 선택자를 사용하면 안된다.")]),t._v(" "),a("li",[t._v("블록은 서로 중첩해서 작성 할 수 있다.")]),t._v(" "),a("li",[t._v("예) header, menu, search-form")])]),t._v(" "),a("h2",{attrs:{id:"요소-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#요소-element"}},[t._v("#")]),t._v(" 요소(Element)")]),t._v(" "),a("ul",[a("li",[t._v("블록안에서 특정 기능을 담당하는 부분.")]),t._v(" "),a("li",[t._v("block__element 형태로 사용 (더블 언더바)")]),t._v(" "),a("li",[t._v("형태(red, big)가 아닌 목적(item, text, title)에 맞게 결정해야 한다.")]),t._v(" "),a("li",[t._v("요소는 중첩해서 작성 할 수 있다.")]),t._v(" "),a("li",[t._v("요소는 블록의 부분으로만 사용 할 수 있고 다른 요소의 부분으로 사용할 수 없다.")]),t._v(" "),a("li",[t._v("모든 블록에서 요소는 필수가 아닌 선택적으로 사용한다. 즉 블록안에 요소가 없을 수도 있다.")]),t._v(" "),a("li",[t._v("예) menu__item, header__title")])]),t._v(" "),a("h2",{attrs:{id:"수식어-modifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#수식어-modifier"}},[t._v("#")]),t._v(" 수식어(Modifier)")]),t._v(" "),a("ul",[a("li",[t._v("블록이나 요소의 모양(color, size..), 상태(disabled, checked..)를 정의한다.")]),t._v(" "),a("li",[t._v("block__element — modifier, block — modifier 형태로 사용(더블 하이픈)")]),t._v(" "),a("li",[t._v("수식어의 블리언 타입과 키-벨류 타입이 있다.")]),t._v(" "),a("li",[t._v("블리언 타입 : 수식어가 있으면 값이 true 라고 가정한다. (form__button — disabled)")]),t._v(" "),a("li",[t._v("키-벨류 타입 : 키, 벨류를 하이픈으로 연결하여 표시한다. (color-red, theme-ocean)")]),t._v(" "),a("li",[t._v("수식어는 단독으로 사용할 수 없다. 즉 기본 블록과 요소에 추가하여 사용해야 한다. ( class=”block__element block__element — modifier”)")])]),t._v(" "),a("h2",{attrs:{id:"혼합사용-mix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#혼합사용-mix"}},[t._v("#")]),t._v(" 혼합사용 (Mix)")]),t._v(" "),a("ul",[a("li",[t._v("block1, block2__element 형태로 사용할 수 있다.")]),t._v(" "),a("li",[t._v("block2__element 에 여백이나 위치를 지정하고 block1은 독립적으로 유지할 수 있다.")])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("”header”")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n     "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("”search-form")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("header__search-form”")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("h2",{attrs:{id:"bem-정리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bem-정리"}},[t._v("#")]),t._v(" BEM 정리")]),t._v(" "),a("p",[t._v("BEM방법론이 어울리는 곳")]),t._v(" "),a("ul",[a("li",[t._v("디자인~마크업~프론트엔드가 함께 일하고, 서로 간의 의사소통이 활발한 곳")]),t._v(" "),a("li",[t._v("내용이 복잡하고, 구조를 탄탄하게 짜야 하는 곳")])]),t._v(" "),a("p",[t._v("BEM방법론이 어울리지 않는 곳")]),t._v(" "),a("ul",[a("li",[t._v("외부 업체와 함께 일하거나, 마크업~프론트엔드 간의 의사소통이 힘든 곳")]),t._v(" "),a("li",[t._v("내부 구조는 관심 없고, 빠르게 결과물이 필요한 곳")])]),t._v(" "),a("p",[t._v("기존 서비스에서 Less를 활용하면서 서비스가 복잡해지니 관리하기가 어려워셨습니다. 매번 빌드할때마다 종종 애러도 자주나고, 여러사람이 함께 협업하기에는 적절하지 않는 방향에서 BEM을 통해서 팀원들과 분업도 활발해졌습니다. 이 방법도 사실 여러서비스가 붙게되면 클래스명이 괴랄해져가는걸 쉽게 졸 수있는데 그럴때는 팀 내에서 가이드를 잡아서 약어규칙등을 만들어가면 해결 될 수 있다고 생각합니다. Naver나 Line 등등에는 가이드 문서가 잡혀있다고 하는데 그럴걸 만들어 볼 수 있는 기회가 있으면 좋겠는데... 항상 실무에는 여유가 없는게 아쉽습니다.")]),t._v(" "),a("h2",{attrs:{id:"reference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reference"}},[t._v("#")]),t._v(" Reference")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://en.bem.info/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BEM"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://getbem.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("getBEM"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://en.bem.info/methodology/filestructure/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BEM File Structure"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);